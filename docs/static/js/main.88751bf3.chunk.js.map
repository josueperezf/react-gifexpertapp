{"version":3,"sources":["componentes/AgregarCategoria.js","helpers/getGifs.js","componentes/GifGridItem.js","componentes/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AgregarCategoria","setcategorias","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","categorias","type","value","onChange","event","target","getGifs","categoria","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","imagenes","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"mMAIaA,EAAmB,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EACbC,mBAAS,IADI,mBAC1CC,EAD0C,KAC9BC,EAD8B,KAejD,OACI,sBAAMC,SATW,SAACC,GAClBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAc,SAACS,GAAD,OAAeP,GAAf,mBAA8BO,OAC5CN,EAAc,MAIlB,SACI,uBACIO,KAAK,OACLC,MAAST,EACTU,SAjBc,SAACC,GACvBV,EAAcU,EAAMC,OAAOH,a,+BCRtBI,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,mGACoFC,UAAUH,IAD9F,SAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KACDC,EAAOD,EAAKE,KAAI,SAAAC,GAAM,IAAD,EACvB,MAAO,CACHC,GAASD,EAAIC,GACbC,MAASF,EAAIE,MACbV,IAAG,UAAMQ,EAAIG,cAAV,aAAM,EAAYC,iBAAiBZ,QAR3B,kBAWZM,GAXY,4CAAH,sDCWLO,EATK,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAC7B,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCqCDO,EAtCC,SAAC,GAAiB,IAAhBnB,EAAe,EAAfA,UAAe,ECDL,SAACA,GAAa,IAAD,EACXf,mBAAS,CAC/BsB,KAAQ,GACRa,SAAS,IAHwB,mBAC9BC,EAD8B,KACvBC,EADuB,KAkBrC,OAVAC,qBAAU,WACNxB,EAAQC,GACHwB,MAAK,SAACC,GACHH,EAAS,CACLf,KAAQkB,EACRL,SAAS,SAGtB,CAACpB,IAEGqB,EDhB0BK,CAAa1B,GAAlC2B,EADiB,EACtBpB,KAAea,EADO,EACPA,QAWtB,OACI,qCACA,oBAAIJ,UAAU,qCAAd,SAAoDhB,IAElDoB,GAAW,mBAAGJ,UAAU,mCAAb,uBACb,qBAAKA,UAAU,YAAf,SAOYW,EAASlB,KAAI,SAAAC,GACT,OAAO,cAAC,EAAD,eAA+BA,GAAbA,EAAIC,aEPtCiB,G,MAnBM,WAAK,IAAD,EACe3C,mBAAU,CAAC,cAD1B,mBACdQ,EADc,KACFT,EADE,KAGrB,OACI,eAAC,WAAD,WACI,8CACA,cAAC,EAAD,CAAkBA,cAAeA,IACjC,uBAEA,6BAEQS,EAAWgB,KAAI,SAACT,GAAD,OAAe,cAAC,EAAD,CAAyBA,UAAWA,GAAtBA,a,MCVhE6B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.88751bf3.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nexport const AgregarCategoria = ({setcategorias}) => {\r\n    const [inputValue, setinputValue] = useState('');\r\n\r\n    const handleInputChange = (event)=>{\r\n        setinputValue(event.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e)=>{\r\n        e.preventDefault();\r\n        // const valor = e.target.elements[0].value;\r\n        if(inputValue.trim().length > 0) {\r\n            setcategorias((categorias)=>[inputValue, ...categorias]);\r\n            setinputValue('');\r\n        }\r\n    }\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n                type=\"text\"\r\n                value = {inputValue}\r\n                onChange={ handleInputChange }\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAgregarCategoria.propTypes = {\r\n    setcategorias:PropTypes.func.isRequired\r\n}","export const getGifs = async (categoria, )=>{\r\n    const url =`https://api.giphy.com/v1/gifs/search?limit=10&api_key=SmbnVrmJ8IATXwlRg6mrG7kRHuEC6Bko&q=${encodeURI(categoria)}`;\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n    const gifs = data.map(img=>{\r\n        return {\r\n            id      :img.id,\r\n            title   :img.title,\r\n            url     :img.images?.downsized_medium.url\r\n        }\r\n    });\r\n    return gifs;\r\n};","import React from 'react';\r\n\r\nconst GifGridItem = ({id, title, url}) => {\r\n    return (\r\n        <div className=\"card animate__animated animate__bounce\">\r\n            <img src={url} alt={title} />\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GifGridItem\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport GifGridItem from './GifGridItem';\r\n// import PropTypes from 'prop-types'\r\n\r\nconst GifGrid = ({categoria}) => {\r\n    const {data:imagenes, loading} = useFetchGifs(categoria);\r\n    /*\r\n    // el siguiente hook hace evaita que cada vez que se realice un cambio en el html realice la llamada http\r\n    useEffect (() => {\r\n        getGifs(categoria).then((imgs)=>{\r\n            setimages(imgs);\r\n        });\r\n    },[categoria])\r\n    */\r\n    // en la anterior linea, [categoria] se puede quitar, pero fernando la coloca y dice que es para que si en algun momento cambia el valor de la categoria, entonces todo lo que esta dentro de 'useEffect' se ejecutaria nuevamente\r\n    \r\n    return (\r\n        <>\r\n        <h3 className=\" animate__animated animate__fadeIn\">{categoria}</h3>\r\n        {/** la siguiente linea es como un operador ternario, pero como no quiere evaluar el de lo contrario, se unsa el && */}\r\n        { loading && <p className=\"animate__animated animate__flash\" > Cargando</p> }\r\n        <div className=\"card-grid\">\r\n            { /**  \r\n             * en la seccion GifGridItem se le va a enviar el img, pero fernando hacer una destructuracion {...img}\r\n             * con ello logra que GifGridItem no reciba asi ({img}), sino directamente ({id, title, utl})\r\n            */}\r\n                {\r\n                    \r\n                    imagenes.map(img=>{\r\n                        return <GifGridItem key={img.id}  {...img} />\r\n                    })\r\n                    \r\n                }\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nGifGrid.propTypes = {\r\n\r\n}\r\n\r\nexport default GifGrid\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\n// todo hook empiesa con la palabra hook\r\nexport const useFetchGifs = (categoria)=>{\r\n    const [state, setstate] = useState({\r\n        data:   [],\r\n        loading: true\r\n    });\r\n\r\n    // esto se coloca es para que si cambia el componente lo que este en use useEffect no se llame constantemente\r\n    // el useEffect se llamara la primera vez y si llegara a cambiar el valor de categoria, como no cambia no se ejectuta esa funcion useEffect de nuevo\r\n    useEffect(() => {\r\n        getGifs(categoria)\r\n            .then((imgs)=>{\r\n                setstate({\r\n                    data:   imgs,\r\n                    loading: false\r\n                });\r\n            })\r\n    }, [categoria])\r\n\r\n    return state; // { data:[], loading:true }\r\n}","import { Fragment, useState } from \"react\";\r\nimport { AgregarCategoria } from \"./componentes/AgregarCategoria\";\r\nimport GifGrid from \"./componentes/GifGrid\";\r\nimport 'animate.css'\r\nconst GifExpertApp = ()=>{\r\n    const [categorias, setcategorias] = useState (['One Punch']);\r\n\r\n    return (\r\n        <Fragment>\r\n            <h2>GifExpertApp</h2>\r\n            <AgregarCategoria setcategorias={setcategorias} />\r\n            <hr/>\r\n            \r\n            <ol>\r\n                {\r\n                    categorias.map((categoria) => <GifGrid key={categoria} categoria={categoria}  /> )\r\n                }\r\n            </ol>\r\n\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}